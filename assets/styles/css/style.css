@charset "UTF-8";
/*------------------------------------*\
    YOUR-PROJECT.CSS
\*------------------------------------*/
/**
 * 
 * sass --watch rawrrr.scss:your-project.min.css --style compressed
 * 
 * Here we set up some variables, include the inuit.css framework, then add our
 * project-specific components afterwards.
 */
/**
 * Setup
 */
/*------------------------------------*\
    $VARS
\*------------------------------------*/
/**
 * Set up project-specific variables here which are then used throughout your
 * build. These variables are automatically picked up by inuit.css so you should
 * never need to modify any framework code.
 */
/**
 * Debug mode will visually highlight any potential markup/accessibility quirks
 * in the browser. Set to `true` or `false`.
 */
/**
 * Fonts
 */
/**
 * Base Colors
 */
/**
 * Base stuff
 */
/**
 * How big would you like round corners to be by default?
 */
/**
 * Assign our `$base-line-height` to a new spacing var for more transparency.
 */
/**
 * Font-sizes (in pixels). Refer to relevant sections for their implementations.
 */
/**
 * Brand stuff
 */
/**
 * We need to supply a full code font-stack in order to combat this:
 * jsfiddle.net/csswizardry/uD6UW
 */
/*------------------------------------*\
    INUIT.CSS
\*------------------------------------*/
/**
 * 
 * inuitcss.com -- @inuitcss -- @csswizardry
 * 
 */
/**
 * inuit.css acts as a base stylesheet which you should extend with your own
 * theme stylesheet.
 * 
 * inuit.css aims to do the heavy lifting; sorting objects and abstractions,
 * design patterns and fiddly bits of CSS, whilst leaving as much design as
 * possible to you. inuit.css is the scaffolding to your decorator.
 * 
 * This stylesheet is heavily documented and contains lots of comments, please
 * take care to read and refer to them as you build. For further support please
 * tweet at @inuitcss.
 * 
 * Owing to the amount of comments please only ever use `inuit.min.css` in
 * production. This file is purely a dev document.
 * 
 * The table of contents below maps to section titles of the same name, to jump
 * to any section simply run a find for $[SECTION-TITLE].
 * 
 * Most objects and abstractions come with a chunk of markup that you should be
 * able to paste into any view to quickly see how the CSS works in conjunction
 * with the correct HTML.
 * 
 * inuit.css is written to this standard: github.com/csswizardry/CSS-Guidelines
 * 
 * LICENSE
 * 
 * Copyright 2012 Harry Roberts
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * Thank you for choosing inuit.css. May your floats remain cleared.
 */
/*------------------------------------*\
    $CONTENTS
\*------------------------------------*/
/**
 * CONTENTS............You’re reading it!
 * WARNING.............Here be dragons!
 * IMPORTS.............Begin importing the sections below
 * 
 * MIXINS..............Super-simple Sass stuff
 * RESET...............Set some defaults
 * CLEARFIX............
 * SHARED..............Shared declarations
 * 
 * MAIN................High-level elements like `html`, `body`, etc.
 * HEADINGS............Double-stranded heading hierarchy
 * PARAGRAPHS..........
 * SMALLPRINT..........Smaller text elements like `small`
 * QUOTES..............
 * CODE................
 * LINKS...............
 * LISTS...............
 * IMAGES..............
 * TABLES..............
 * FORMS...............
 * 
 * GRIDS...............Fluid, proportional and nestable grids
 * IE7-GRIDS...........Make the grids work in old IE
 * FLEXBOX.............Crudely emulate flexbox
 * COLUMNS.............CSS3 columns
 * NAV.................A simple abstraction to put a list in horizontal nav mode
 * OPTIONS.............Grouped nav items
 * PAGINATION..........Very stripped back, basic paginator
 * BREADCRUMB..........Simple breadcrumb trail object
 * MEDIA...............Media object
 * ISLAND..............Boxed off content
 * BLOCK-LIST..........Blocky lists of content
 * MATRIX..............Gridded lists
 * SPLIT...............A simple split-in-two object
 * THIS-OR-THIS........Options object
 * COMPLEX-LINK........
 * FLYOUT..............Flyout-on-hover object
 * SPRITE..............Generic spriting element
 * ICON-TEXT...........Icon and text couplings
 * BUTTONS.............
 * LOZENGES............Basic lozenge styles
 * RULES...............Horizontal rules
 * STATS...............Simple stats object
 * GREYBOX.............Wireframing styles
 * 
 * WIDTHS..............Width classes for use alongside the grid system etc.
 * PUSH................Push classes for manipulating grids
 * PULL................Pull classes for manipulating grids
 * BRAND...............Helper class to apply brand treatment to elements
 * HELPER..............A series of helper classes to use arbitrarily
 * DEBUG...............Enable to add visual flags for debugging purposes
 */
/*------------------------------------*\
    $WARNING
\*------------------------------------*/
/*
 * inuit.css, being an OO framework, works in keeping with the open/closed
 * principle. The variables you set previously are now being used throughout
 * inuit.css to style everything we need for a base. Any custom styles SHOULD
 * NOT be added or modified in inuit.css directly, but added via your theme
 * stylesheet as per the open/closed principle:
 * 
 * csswizardry.com/2012/06/the-open-closed-principle-applied-to-css
 * 
 * Try not to edit any CSS beyond this point; if you find you need to do so
 * it is a failing of the framework so please tweet at @inuitcss.
 */
/*------------------------------------*\
    $IMPORTS
\*------------------------------------*/
/**
 * Generic utility styles etc.
 */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 * 
   `@include font-size(10);`
 * 
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
/**
 * Create vendor-prefixed CSS in one go, e.g.
 * 
   `@include vendor(box-sizing, border-box);`
 * 
 */
/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 * 
   .foo{
       @include vendor(animation, shrink 3s);
   }
   
   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 * 
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
/**
 * Force overly long spans of text to truncate, e.g.:
 * 
   `@include truncate(100%);`
 * 
 * Where `$truncation-boundary` is a united measurement.
 */
/*------------------------------------*\
    $RESET
\*------------------------------------*/
/**
 * A more considered reset; more of a restart... 
 * As per: csswizardry.com/2011/10/reset-restarted
 */
body,
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
table, th, td, caption,
figure,
hr {
  margin: 0;
  padding: 0; }

article, aside, details, figcaption, figure, footer,
header, hgroup, menu, nav, section {
  display: block; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

strong, b, mark {
  font-weight: bold;
  font-style: inherit; }

em, i, cite, q, address, dfn, var {
  font-style: italic;
  font-weight: inherit; }

abbr[title], dfn[title] {
  cursor: help;
  border-bottom: 1px dotted; }

ins {
  border-bottom: 1px solid; }

a, u, ins {
  text-decoration: none; }

del, s {
  text-decoration: line-through; }

img {
  border: none;
  font-style: italic; }

input,
select, option, optgroup,
textarea {
  font: inherit; }

/**
 * Normalize `sup` and `sub` elements.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/**
 * Give form elements some cursor interactions...
 */
label,
input,
textarea,
button,
select,
option {
  cursor: pointer; }

.text-input:active,
.text-input:focus,
textarea:active,
textarea:focus {
  cursor: text;
  outline: none; }

/*------------------------------------*\
    $CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: nicolasgallagher.com/micro-clearfix-hack
 * Extend the clearfix class with Sass to avoid the `.cf` class appearing over
 * and over in your markup.
 */
.cf, .gw,
.grid-wrapper, .nav, .media, .island,
.islet, .matrix, .multi-list, .stat-group {
  zoom: 1; }
  .cf:before, .gw:before,
  .grid-wrapper:before, .nav:before, .media:before, .island:before,
  .islet:before, .matrix:before, .multi-list:before, .stat-group:before, .cf:after, .gw:after,
  .grid-wrapper:after, .nav:after, .media:after, .island:after,
  .islet:after, .matrix:after, .multi-list:after, .stat-group:after {
    content: " ";
    display: table; }
  .cf:after, .gw:after,
  .grid-wrapper:after, .nav:after, .media:after, .island:after,
  .islet:after, .matrix:after, .multi-list:after, .stat-group:after {
    clear: both; }

/*------------------------------------*\
    $SHARED
\*------------------------------------*/
/**
 * Where `margin-bottom` is concerned, this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 */
/**
 * Base elements
 */
h1, h2, h3, h4, h5, h6, hgroup,
ul, ol, dl,
blockquote, p, address,
table,
fieldset, figure,
pre,
.form-fields > li,
.media,
.island,
.islet {
  margin-bottom: 24px;
  margin-bottom: 1.5rem; }
  .islet h1, .islet h2, .islet h3, .islet h4, .islet h5, .islet h6, .islet hgroup, .islet
  ul, .islet ol, .islet dl, .islet
  blockquote, .islet p, .islet address, .islet
  table, .islet
  fieldset, .islet figure, .islet
  pre, .islet .form-fields > li, .islet
  .media, .islet
  .island, .islet
  .islet {
    margin-bottom: 12px;
    margin-bottom: 0.75rem; }

/**
 * Doubled up `margin-bottom` helper class.
 */
.landmark {
  margin-bottom: 48px;
  margin-bottom: 3rem; }

/**
 * `hr` elements only take up a few pixels, so we need to give them special
 * treatment regarding vertical rhythm.
 */
hr {
  margin-bottom: 22px;
  margin-bottom: 1.375rem; }

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once, here.
 */
ul, ol, dd {
  margin-left: 48px;
  margin-left: 3rem; }

/**
 * Base styles; unclassed HTML elements etc.
 */
/*------------------------------------*\
    $MAIN
\*------------------------------------*/
html {
  font: 1em/1.5 serif;
  overflow-y: scroll;
  min-height: 100%; }

/*------------------------------------*\
    $HEADINGS
\*------------------------------------*/
/**
 * As per: csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css
 * 
 * When we define a heading we also define a corresponding class to go with it.
 * This allows us to apply, say, `class=alpha` to a `h3`; a double-stranded
 * heading hierarchy.
 */
h1, .alpha {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.33333; }

h2, .beta {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.6; }

h3, .gamma {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1; }

h4, .delta {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }

h5, .epsilon {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5; }

h6, .zeta {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429; }

/**
 * Heading groups and generic any-heading class.
 * To target any heading of any level simply apply a class of `.hN`, e.g.:
 * 
   <hgroup>
       <h1 class=hN>inuit.css</h1>
       <h2 class=hN>Best. Framework. Ever!</h2>
   </hgroup>
 * 
 */
hgroup .hN {
  margin-bottom: 0; }

/**
 * A series of classes for setting massive type; for use in heroes, mastheads,
 * promos, etc.
 */
.giga {
  font-size: 96px;
  font-size: 6rem;
  line-height: 1; }

.mega {
  font-size: 72px;
  font-size: 4.5rem;
  line-height: 1; }

.kilo {
  font-size: 48px;
  font-size: 3rem;
  line-height: 1; }

/*------------------------------------*\
    $PARAGRAPHS
\*------------------------------------*/
/**
 * The `.lede` class is used to make the introductory text (usually a paragraph)
 * of a document slightly larger.
 */
.lede,
.lead {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333; }

/*------------------------------------*\
    $SMALLPRINT
\*------------------------------------*/
/**
 * A series of classes for setting tiny type; for use in smallprint etc.
 * 
 * `small` is relative to whatever its parent is, `.milli` and `.micro` are
 * absolute.
 */
small {
  font-size: 0.75em; }

.smallprint,
.milli {
  font-size: 12px;
  font-size: 0.75rem;
  line-height: 2; }

.micro {
  font-size: 10px;
  font-size: 0.625rem;
  line-height: 2.4; }

/*------------------------------------*\
    $QUOTES
\*------------------------------------*/
/**
 * Big up @boblet: html5doctor.com/blockquote-q-cite
 */
q {
  quotes: "‘" "’" "“" "”"; }

q:before {
  content: "‘";
  content: open-quote; }

q:after {
  content: "’";
  content: close-quote; }

q q:before {
  content: "“";
  content: open-quote; }

q q:after {
  content: "”";
  content: close-quote; }

blockquote {
  quotes: "“" "”"; }

blockquote p:before {
  content: "“";
  content: open-quote; }

blockquote p:after {
  content: "";
  content: no-close-quote; }

blockquote p:last-of-type:after {
  content: "”";
  content: close-quote; }

/**
 * 
   <blockquote>
       <p>Insanity: doing the same thing over and over again and expecting
       different results.</p>
       <b class=source>Albert Einstein</b>
   </blockquote>
 * 
 */
blockquote {
  /**
   * .4em is roughly equal to the width of the opening “ that we wish to hang.
   */
  text-indent: -0.4em; }
  blockquote p:last-of-type {
    margin-bottom: 0; }

.source {
  display: block;
  text-indent: 0; }
  .source:before {
    content: "—"; }

/*------------------------------------*\
    $CODE
\*------------------------------------*/
/**
 * Use an explicit font stack to ensure browsers render correct `line-height`.
 */
pre, code, samp, kbd {
  font-family: Inconsolata, Monaco, Consolas, "Andale Mono", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace; }

pre {
  overflow: auto; }

pre mark {
  background: none;
  border-bottom: 1px solid;
  color: inherit; }

/**
 * Add comments to your code examples, e.g.:
 * 
   <code>&lt;/div&gt;<span class=code-comment>&lt;!-- /wrapper --&gt;</span></code>
 * 
 */
.code-comment {
  /**
   * Override this setting in your theme stylesheet
   */
  opacity: 0.75;
  filter: alpha(opacity=75); }

/**
 * You can add line numbers to your code examples but be warned, it requires
 * some pretty funky looking (and technically invalid) markup, e.g.:
 * 
   <pre class=numbered>
       <ol class=numbered__numbers>
           <li><code>.nav{</code></li>
           <li><code>    list-style:none;</code></li>
           <li><code>    margin-left:0;</code></li>
           <li><code>}</code></li>
           <li><code>    .nav > li,</code></li>
           <li><code>        .nav > li > a{</code></li>
           <li><code>            display:inline-block;</code></li>
           <li><code>           *display:inline-block;</code></li>
           <li><code>            zoom:1;</code></li>
           <li><code>        }</code></li>
       </ol>
   </pre>
 * 
 */
.numbered {
  white-space: nowrap; }

.numbered__numbers {
  list-style: decimal-leading-zero inside;
  margin-bottom: 0;
  margin-left: 0; }

.numbered__numbers code {
  white-space: pre; }

/*------------------------------------*\
    $LINKS
\*------------------------------------*/
/**
 * Say no to negative hovers, as per: csswizardry.com/2011/05/on-negative-hovers
 *
 * Sometimes, particularly on larger projects, it is useful to scope link
 * styling only to anchors which have `href` attributes.
 */
a:link {
  /**
   * Set colors etc in your theme stylesheet.
   */
  /**
   * Remove Chrome’s heavy-handed glow.
   */ }
  a:link:hover, a:link:active, a:link:focus {
    text-decoration: underline; }
  a:link:active {
    outline: none; }
  a:link:focus {
    outline: thin dotted; }

/**
 * ‘Current’ states, e.g.:
 * 
   <ul class=nav>
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li class=current><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 */
.current a {
  cursor: text;
  text-decoration: underline; }

/*------------------------------------*\
    $IMAGES
\*------------------------------------*/
img {
  max-width: 100%;
  height: auto; }

figure > img {
  display: block; }

/*------------------------------------*\
    $LISTS
\*------------------------------------*/
/**
 * Remove vertical spacing from nested lists.
 */
li > ul,
li > ol {
  margin-bottom: 0; }

/*------------------------------------*\
    $TABLES
\*------------------------------------*/
/**
 * We have a lot at our disposal for making very complex table constructs, e.g.:
 *
   <table class="table--bordered  table--striped  table--data">
       <colgroup>
           <col class=t10>
           <col class=t10>
           <col class=t10>
           <col>
       </colgroup>
       <thead>
           <tr>
               <th colspan=3>Foo</th>
               <th>Bar</th>
           </tr>
           <tr>
               <th>Lorem</th>
               <th>Ipsum</th>
               <th class=numerical>Dolor</th>
               <th>Sit</th>
           </tr>
       </thead>
       <tbody>
           <tr>
               <th rowspan=3>Sit</th>
               <td>Dolor</td>
               <td class=numerical>03.788</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>32.210</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>47.797</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <th rowspan=2>Sit</th>
               <td>Dolor</td>
               <td class=numerical>09.640</td>
               <td>Lorem</td>
           </tr>
           <tr>
               <td>Dolor</td>
               <td class=numerical>12.117</td>
               <td>Lorem</td>
           </tr>
       </tbody>
   </table>
 *
 */
table {
  width: 100%; }

th,
td {
  padding: 6px;
  text-align: left; }
  @media screen and (min-width: 480px) {
    th,
    td {
      padding: 12px; } }

/**
 * Cell alignments
 */
[colspan] {
  text-align: center; }

[colspan="1"] {
  text-align: left; }

[rowspan] {
  vertical-align: middle; }

[rowspan="1"] {
  vertical-align: top; }

.numerical {
  text-align: right; }

/**
 * In the HTML above we see several `col` elements with classes whose numbers
 * represent a percentage width for that column. We leave one column free of a
 * class so that column can soak up the effects of any accidental breakage in
 * the table.
 */
.t5 {
  width: 5%; }

.t10 {
  width: 10%; }

.t12 {
  width: 12.5%; }

/* 1/8 */
.t15 {
  width: 15%; }

.t20 {
  width: 20%; }

.t25 {
  width: 25%; }

/* 1/4 */
.t30 {
  width: 30%; }

.t33 {
  width: 33.333%; }

/* 1/3 */
.t35 {
  width: 35%; }

.t37 {
  width: 37.5%; }

/* 3/8 */
.t40 {
  width: 40%; }

.t45 {
  width: 45%; }

.t50 {
  width: 50%; }

/* 1/2 */
.t55 {
  width: 55%; }

.t60 {
  width: 60%; }

.t62 {
  width: 62.5%; }

/* 5/8 */
.t65 {
  width: 65%; }

.t66 {
  width: 66.666%; }

/* 2/3 */
.t70 {
  width: 70%; }

.t75 {
  width: 75%; }

/* 3/4*/
.t80 {
  width: 80%; }

.t85 {
  width: 85%; }

.t87 {
  width: 87.5%; }

/* 7/8 */
.t90 {
  width: 90%; }

.t95 {
  width: 95%; }

/**
 * Bordered tables
 */
.table--bordered th,
.table--bordered td {
  border: 1px solid #ccc;
  /* Override this color in your theme stylesheet */ }
  .table--bordered th:empty,
  .table--bordered td:empty {
    border: none; }
.table--bordered thead tr:last-child th {
  border-bottom-width: 2px; }
.table--bordered tbody tr th:last-of-type {
  border-right-width: 2px; }

/**
 * Striped tables
 */
.table--striped tbody tr:nth-of-type(odd) {
  background-color: #ffc;
  /* Override this color in your theme stylesheet */ }

/**
 * Data table
 */
.table--data {
  font: 12px/1.5 sans-serif; }

/*------------------------------------*\
    $FORMS
\*------------------------------------*/
/**
 * 
 * Demo: jsfiddle.net/inuitcss/MhHHU
 * 
 */
fieldset {
  padding: 24px; }

/**
 * Text inputs
 * 
 * Instead of a `[type]` selector for each kind of form input, we just use a
 * class to target any/every one, e.g.:
   <input type=text class=text-input>
   <input type=email class=text-input>
   <input type=password class=text-input>
 * 
 */
.text-input,
textarea {
  /**
   * Style these via your theme stylesheet.
   */ }

/**
 * Group sets of form fields in a list, e.g.:
 * 
   <ul class=form-fields>
       <li>
           <label />
           <input />
       </li>
       <li>
           <label />
           <select />
       </li>
       <li>
           <label />
           <input />
       </li>
   </ul>
 * 
 */
.form-fields {
  list-style: none;
  margin: 0; }

.form-fields > li:last-child {
  margin-bottom: 0; }

/**
 * Labels
 * 
 * Define a `.label` class as well as a `label` element. This means we can apply
 * label-like styling to meta-labels for groups of options where a `label`
 * element is not suitable, e.g.:
 * 
   <li>
       <span class=label>Select an option below:</span>
       <ul class="multi-list  four-cols">
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 * 
 */
label,
.label {
  display: block; }

/**
 * Extra help text in `label`s, e.g.:
 * 
   <label>Card number <small class=additional>No spaces</small></label>
 * 
 */
.additional {
  display: block;
  font-weight: normal; }

/*
 * Groups of checkboxes and radios, e.g.:
 * 
   <li>
       <ul class=check-list>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 * 
 */
.check-list {
  list-style: none;
  margin: 0; }

/*
 * Labels in check-lists
 */
.check-label,
.check-list label,
.check-list .label {
  display: inline-block; }

/**
 * Spoken forms are for forms that read like spoken word, e.g.:
 * 
   <li class=spoken-form>
       Hello, my <label for=spoken-name>name</label> is
       <input type=text class=text-input id=spoken-name>. My home
       <label for=country>country</label> is
       <select id=country>
           <option>UK</option>
           <option>US</option>
           <option>Other</option>
       </select>
   </li>
 * 
 */
.spoken-form label {
  display: inline-block;
  font: inherit; }

/**
 * Extra help text displayed after a field when that field is in focus, e.g.:
 * 
   <label for=email>Email:</label>
   <input type=email class=text-input id=email> 
   <small class=extra-help>.edu emails only</small>
 * 
 * We leave the help text in the document flow and merely set it to
 * `visibility:hidden;`. This means that it won’t interfere with anything once
 * it reappears.
 * 
 */
/*small*/
.extra-help {
  display: inline-block;
  visibility: hidden; }

.text-input:active + .extra-help,
.text-input:focus + .extra-help {
  visibility: visible; }

/**
 * Objects and abstractions
 * 
 * Single-line comment (//) out any objects you do not need in your project.
 */
/*------------------------------------*\
    $GRIDS
\*------------------------------------*/
/**
 * Fluid and nestable grid system, e.g.:
 * 
   <div class=gw>
       
       <div class="g  one-third">
           <p>One third grid</p>
       </div>
       
       <div class="g  two-thirds">
           <p>Two thirds grid</p>
       </div>
       
       <div class="g  one-half">
           <p>One half grid</p>
       </div>
       
       <div class="g  one-quarter">
           <p>One quarter grid</p>
       </div>
       
       <div class="g  one-quarter">
           <p>One quarter grid</p>
       </div>
       
   </div>
 * 
 * Demo: jsfiddle.net/inuitcss/CLYUC
 * 
 */
/**
 * Grid wrapper
 * 
 * Shorthand and verbose
 */
.gw,
.grid-wrapper {
  /**
   * Negative margin to negate the padding on the first grid child. 
   */
  margin-left: -24px;
  /**
   * The following declarations allow us to use the `.gw` class on lists.
   */
  list-style: none;
  margin-bottom: 0; }

/**
 * Reverse grid order
 * 
   <div class="gw  gw--rev">
       
       <div class="g  one-third">
           <p>Appears on the right</p>
       </div>
       
       <div class="g  two-thirds">
           <p>Appears on the left</p>
       </div>
       
   </div>
 * 
 */
.gw--rev .g,
.grid-wrapper--rev .grid {
  float: right; }

/**
 * Very infrequently occuring grid wrappers as children of grid wrappers.
 */
.gw > .gw,
.grid-wrapper > .grid-wrapper {
  margin-left: 0; }

/**
 * Grid
 * 
 * Shorthand and verbose
 */
.g,
.grid {
  float: left;
  padding-left: 24px;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  -ms-box-sizing: border-box;
  -o-box-sizing: border-box;
  box-sizing: border-box; }

/*------------------------------------*\
    $GRIDS-IE7
\*------------------------------------*/
/*
 * To make the grid system work properly in IE7 we need to add a little more
 * markup to account for the fact that it doesn’t support `box-sizing`, e.g.:
 * 
   <!--[if lte IE 7]><div class=ie7-grid><![endif]-->
       
       <div class=gw>
           
           <div class="g  one-third"><div class=g__inner>
               <p>Foo</p>
           </div></div>
           
           <div class="g  one-third"><div class=g__inner>
               <p>Bar</p>
           </div></div>
           
           <div class="g  one-third"><div class=g__inner>
               <p>Baz</p>
           </div></div>
           
       </div>
   
   <!--[if lte IE 7]></div><![endif]-->
 * 
 * Demo: jsfiddle.net/inuitcss/9Euvj
 * 
 */
.ie7-grid {
  overflow: hidden; }

.ie7-grid .gw,
.ie7-grid .grid-wrapper {
  margin-right: -12px;
  margin-left: -12px; }

.ie7-grid .g,
.ie7-grid .grid {
  padding: 0; }

.ie7-grid .g__inner,
.ie7-grid .grid__inner {
  padding-right: 12px;
  padding-left: 12px; }

/*------------------------------------*\
    $FLEXBOX
\*------------------------------------*/
/**
 * Until we can utilise flexbox natively we can kinda, sorta, attempt to emulate
 * it, in a way... e.g.:
 * 
   <header class=flexbox>
       
       <div class=flexbox__item>
           <b>Welcome to</b>
       </div>
       
       <div class=flexbox__item>
           <img src="//csswizardry.com/inuitcss/img/logo.jpg" alt="inuit.css">
       </div>
   
   </header>
 * 
 * We can also combine our grid system classes with `.flexbox__item` classes,
 * e.g.:
 * 
   <div class=flexbox>
       <div class="flexbox__item  one-quarter">
       </div>
       <div class="flexbox__item  three-quarters">
       </div>
   </div>
 * 
 * It’s pretty poorly named I’m afraid, but it works…
 * 
 * Demo: jsfiddle.net/inuitcss/ufUh2
 * 
 */
.flexbox {
  display: table;
  width: 100%; }

.flexbox__item {
  display: table-cell;
  vertical-align: middle; }

/*------------------------------------*\
    $COLUMNS
\*------------------------------------*/
/**
 * Here we can set elements in columns of text using CSS3, e.g.:
 * 
   <p class=text-cols--2>
 * 
 * Demo: jsfiddle.net/inuitcss/E26Yd
 * 
 */
.text-cols--2, .text-cols--3, .text-cols--4, .text-cols--5 {
  -webkit-column-gap: 24px;
  -moz-column-gap: 24px;
  -ms-column-gap: 24px;
  -o-column-gap: 24px;
  column-gap: 24px; }

.text-cols--2 {
  -webkit-column-count: 2;
  -moz-column-count: 2;
  -ms-column-count: 2;
  -o-column-count: 2;
  column-count: 2; }

.text-cols--3 {
  -webkit-column-count: 3;
  -moz-column-count: 3;
  -ms-column-count: 3;
  -o-column-count: 3;
  column-count: 3; }

.text-cols--4 {
  -webkit-column-count: 4;
  -moz-column-count: 4;
  -ms-column-count: 4;
  -o-column-count: 4;
  column-count: 4; }

.text-cols--5 {
  -webkit-column-count: 5;
  -moz-column-count: 5;
  -ms-column-count: 5;
  -o-column-count: 5;
  column-count: 5; }

/*------------------------------------*\
    $NAV
\*------------------------------------*/
/**
 * Nav abstraction as per: csswizardry.com/2011/09/the-nav-abstraction
 * When used on an `ol` or `ul`, this class throws the list into horizontal mode
 * e.g.:
 * 
   <ul class=nav>
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 * Demo: jsfiddle.net/inuitcss/Vnph4
 * 
 */
.nav {
  list-style: none;
  margin-left: 0; }
  .nav > li,
  .nav > li > a {
    display: inline-block;
    *display: inline;
    zoom: 1; }

/**
 * `.nav--stacked` extends `.nav` and throws the list into vertical mode, e.g.:
 * 
   <ul class="nav  nav--stacked">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 */
.nav--stacked > li {
  display: list-item; }
  .nav--stacked > li > a {
    display: block; }

/**
 * `.nav--banner` extends `.nav` and centres the list, e.g.:
 * 
   <ul class="nav  nav--banner">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 */
.nav--banner {
  text-align: center; }

/**
 * Give nav links a big, blocky hit area. Extends `.nav` and needs whitespace
 * caused by `inline-block` elements collapsing e.g.:
 * 
   <ul class="nav  nav--block">
       <li><a href=#>Home</a></li><!--
    --><li><a href=#>About</a></li><!--
    --><li><a href=#>Portfolio</a></li><!--
    --><li><a href=#>Contact</a></li>
   </ul>
 * 
 */
.nav--block, .options {
  line-height: 1; }
  .nav--block > li > a, .options > li > a {
    padding: 12px; }

/**
 * Force a nav to occupy 100% of the available width of its parent. Extends
 * `.nav`, e.g.:
 * 
   <ul class="nav  nav--fit">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 * Thanks to @pimpl for this idea!
 */
.nav--fit {
  display: table;
  width: 100%; }
  .nav--fit > li {
    display: table-cell; }
    .nav--fit > li > a {
      display: block; }

/**
 * Make a list of keywords. Extends `.nav`, e.g.:
 * 
   `<ul class="nav  nav--keywords>`
 * 
 */
.nav--keywords > li:after {
  content: ", "; }
.nav--keywords > li:last-child:after {
  display: none; }

/*------------------------------------*\
    $OPTIONS
\*------------------------------------*/
/**
 * Link-group nav, used for displaying related options. Extends `.nav--block`
 * but could also extend `.nav--fit`. Extend with colours and ‘current states’
 * in your theme stylesheet.
 * 
  <ul class="nav  options">
      <li><a></a></li><!-- 
   --><li><a></a></li><!-- 
   --><li><a></a></li><!-- 
   --><li><a></a></li> 
   </ul>
 * 
 * Demo: jsfiddle.net/inuitcss/vwfaf
 * 
 */
.options > li > a {
  border: 0 solid #ccc;
  /* Extend in your theme stylesheet */
  border-width: 1px;
  border-left-width: 0; }
.options > li:first-child > a {
  border-left-width: 1px;
  border-radius: 4px 0 0 4px; }
.options > li:last-child > a {
  border-radius: 0 4px 4px 0; }

/*------------------------------------*\
    $PAGINATION
\*------------------------------------*/
/**
 * Basic pagination object, extends `.nav`.
 * Requires some funky commenting to collapse any white-space caused by the
 * `display:inline-block;` rules.
 * 
   <ol class="nav  pagination">
       <li class=pagination__first>First</li><!--
    --><li class=pagination__prev>Previous</li><!--
    --><li><a href=/page/1>1</a></li><!--
    --><li><a href=/page/2>2</a></li><!--
    --><li class=current><a href=/page/3>3</a></li><!--
    --><li><a href=/page/4>4</a></li><!--
    --><li><a href=/page/5>5</a></li><!--
    --><li class=pagination__next><a href=/page/next>Next</a></li><!--
    --><li class=pagination__last><a href=/page/last>Last</a></li>
   </ol>
 * 
 * Demo: jsfiddle.net/inuitcss/9Y6PU
 * 
 */
.pagination {
  text-align: center; }

.pagination > li {
  padding: 12px; }

.pagination > li > a {
  padding: 12px;
  margin: -12px; }

.pagination__first a:before {
  content: "« "; }

.pagination__last a:after {
  content: " »"; }

/*------------------------------------*\
    $BREADCRUMB
\*------------------------------------*/
/**
 * Simple breadcrumb styling to apply to (ordered) lists. Extends `.nav`, e.g.:
 * 
   <ol class="nav  breadcrumb">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>The Board</a></li>
       <li class=current><a href=#>Directors</a></li>
   </ol>
 * 
 * Demo: jsfiddle.net/inuitcss/rkAY9
 * 
 */
.breadcrumb > li + li:before {
  content: "» "; }

/**
 * For denoting a path-like structure, GitHub style, e.g.:
 * 
   <ol class="nav  breadcrumb--path">
       <li class=breadcrumb__root><a href=#>inuit.css</a></li>
       <li><a href=#>inuit.css</a></li>
       <li><a href=#>partials</a></li>
       <li class=current><a href=#>objects</a></li>
   </ol>
 * 
 */
.breadcrumb--path > li + li:before {
  content: "/ "; }

/**
 * Assign a delimiter on the fly through a data attribute, e.g.:
 * 
   <ol class="nav  breadcrumb">
       <li><a href=#>Home</a></li>
       <li data-breadcrumb="|"><a href=#>About</a></li>
       <li data-breadcrumb="|"><a href=#>The Board</a></li>
       <li data-breadcrumb="|" class=current><a href=#>Directors</a></li>
   </ol>
 * 
 */
.breadcrumb > li + li[data-breadcrumb]:before {
  content: attr(data-breadcrumb) " "; }

/**
 * Denote the root of the tree.
 */
.breadcrumb__root {
  font-weight: bold; }

/*------------------------------------*\
    $MEDIA
\*------------------------------------*/
/**
 * Place any image- and text-like content side-by-side, as per:
 * stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code
 * E.g.:
 * 
   <div class=media>
       <img src=http://placekitten.com/200/300 alt="" class=media__img>
       <p class=media__body>Lorem ipsum dolor sit amet, consectetur adipisicing elit,
       sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
   </div>
 * 
 * Demo: jsfiddle.net/inuitcss/cf4Qs
 * 
 */
.media {
  display: block; }

.media__img {
  float: left;
  margin-right: 24px; }

/**
 * Reversed image location (right instead of left).
 */
.media__img--rev {
  float: right;
  margin-left: 24px; }

.media__img img,
.media__img--rev img {
  display: block; }

.media__body {
  overflow: hidden; }

.media__body,
.media__body > :last-child {
  margin-bottom: 0; }

/**
 * `.img`s in `.islet`s need an appropriately sized margin.
 */
.islet .media__img {
  margin-right: 12px; }

.islet .media__img--rev {
  margin-left: 12px; }

/*------------------------------------*\
    $ISLAND
\*------------------------------------*/
/**
 * Simple, boxed off content, as per: csswizardry.com/2011/10/the-island-object
 * E.g.:
 * 
   <div class=island>
       I am boxed off.
   </div>
 * 
 * Demo: jsfiddle.net/inuitcss/u8pV3
 * 
 */
.island,
.islet {
  display: block; }

.island {
  padding: 24px; }

.island > :last-child,
.islet > :last-child {
  margin-bottom: 0; }

/**
 * Just like `.island`, only smaller.
 */
.islet {
  padding: 12px; }

/*------------------------------------*\
    $BLOCK-LIST
\*------------------------------------*/
/**
 * Create big blocky lists of content, e.g.:
 * 
   <ul class=block-list>
      <li>Foo</li>
      <li>Bar</li>
      <li>Baz</li>
      <li><a href=# class=block-list__link>Foo Bar Baz</a></li>
   </ul>
 * 
 * Extend this object in your theme stylesheet.
 * 
 * Demo: jsfiddle.net/inuitcss/hR57q
 * 
 */
.block-list,
.block-list > li {
  border: 0 solid #ccc;
  /* Override this color in your theme stylesheet */ }

.block-list {
  list-style: none;
  margin-left: 0;
  border-top-width: 1px; }
  .block-list > li {
    border-bottom-width: 1px;
    padding: 12px; }

.block-list__link {
  display: block;
  padding: 12px;
  margin: -12px; }

/*------------------------------------*\
    $MATRIX
\*------------------------------------*/
/**
 * Create a grid of items out of a single list, e.g.:
 * 
   <ul class="matrix  three-cols">
       <li class=all-cols>Lorem</li>
       <li>Ipsum <a href=#>dolor</a></li>
       <li><a href=# class=matrix__link>Sit</a></li>
       <li>Amet</li>
       <li class=all-cols>Consectetuer</li>
   </ul>
 * 
 * Extend this object in your theme stylesheet.
 * 
 * Demo: jsfiddle.net/inuitcss/Y2zrU
 * 
 */
.matrix,
.matrix > li {
  border: 0 solid #ccc;
  /* Override this color in your theme stylesheet */ }

.matrix {
  list-style: none;
  margin-left: 0;
  border-top-width: 1px;
  border-left-width: 1px; }
  .matrix > li {
    padding: 12px;
    float: left;
    border-right-width: 1px;
    border-bottom-width: 1px;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -o-box-sizing: border-box;
    box-sizing: border-box; }

.matrix__link {
  display: block;
  padding: 12px;
  margin: -12px; }

/**
 * The `.multi-list` object is a lot like the `.matrix` object only without the
 * blocky borders and padding.
 * 
   <ul class="multi-list  four-cols">
       <li>Lorem</li>
       <li>Ipsum</li>
       <li>Dolor</li>
       <li>Sit</li>
   </ul>
 * 
 * Demo: jsfiddle.net/inuitcss/Y2zrU
 * 
 */
.multi-list {
  list-style: none;
  margin-left: 0; }

.multi-list > li {
  float: left; }

/**
 * Apply these classes alongside the `.matrix` or `.multi-list` classes on
 * lists to determine how wide their columns are.
 */
.two-cols > li {
  width: 50%; }

.three-cols > li {
  width: 33.333%; }

.four-cols > li {
  width: 25%; }

.five-cols > li {
  width: 20%; }

/**
 * Unfortunately we have to qualify this selector in order to bring its
 * specificity above the `.[number]-cols > li` selectors above.
 */
.matrix > .all-cols,
.multi-list > .all-cols {
  width: 100%; }

/*------------------------------------*\
    $SPLIT
\*------------------------------------*/
/**
 * Simple split item for creating two elements floated away from one another,
 * e.g.:
 * 
   <dl class=split>       
       <dt class=split__title>Burger and fries</dt>
       <dd>&pound;5.99</dd>       
       <dt class=split__title>Fillet steak</dt>
       <dd>&pound;19.99</dd>       
       <dt class=split__title>Ice cream</dt>
       <dd>&pound;2.99</dd>       
   </dl>
 * 
   <ol class="split  results">
       <li class=first><b class=split__title>1st place</b> Bob</li>       
       <li class=second><b class=split__title>2nd place</b> Lilly</li>       
       <li class=third><b class=split__title>3rd place</b> Ted</li>       
   </ol>​
 * 
 * Demo: jsfiddle.net/inuitcss/9gZW7
 * 
 */
.split {
  text-align: right;
  list-style: none;
  margin-left: 0; }

.split__title {
  text-align: left;
  float: left;
  clear: left; }

/*------------------------------------*\
    $THIS-OR-THIS
\*------------------------------------*/
/**
 * Simple options object to provide multiple choices, e.g.:
 * 
   <h1 class=this-or-this>
       <a href=# class="this-or-this__this  two-fifths">
           Free
       </a>
       <span class="this-or-this__or  one-fifth">
           or
       </span>
       <a href=# class="this-or-this__this  two-fifths">
           Pro
       </a>
   </h1>
 * 
 * The `.this-or-this__this` and `.this-or-this__or` objects can be sized using
 * the grid-system classes.
 * 
 * Demo: jsfiddle.net/inuitcss/R3sks
 * 
 */
.this-or-this {
  display: table;
  width: 100%;
  text-align: center; }

.this-or-this__this,
.this-or-this__or {
  display: table-cell;
  vertical-align: middle; }

/*------------------------------------*\
    $COMPLEX-LINK
\*------------------------------------*/
/**
 * As inspired by @necolas:
 * github.com/necolas/suit-utils/blob/master/link.css#L18
 * 
 * Add hover behaviour to only slected items within links, e.g.:
 * 
   <a href=log-in class=complex-link>
       <i class="s  s--user"></i>
       <span class=complex-link__target>Log in</span>
   </a>
 * 
 * Demo: jsfiddle.net/inuitcss/rt9M3
 * 
 */
.complex-link,
.complex-link:hover,
.complex-link:active,
.complex-link:focus {
  text-decoration: none; }

.complex-link:hover .complex-link__target,
.complex-link:active .complex-link__target,
.complex-link:focus .complex-link__target {
  text-decoration: underline; }

/*------------------------------------*\
    $FLYOUT
\*------------------------------------*/
/**
 * Flyouts are pieces of content that fly out of a parent when said parent is
 * hovered. They typically appear bottom-left of the parent.
 * 
   <div class=flyout>
       Foo
       <div class=flyout__content>
           <h1>Lorem</h1>
           <p>Ipsum</p>
       </div>
   </div>
 * 
 * Extend these objects in your theme stylesheet.
 * 
 * Demo: jsfiddle.net/inuitcss/B52HG
 * 
 */
.flyout,
.flyout--alt {
  position: relative;
  overflow: hidden; }

.flyout__content {
  /**
   * Position the flyouts off-screen. This is typically better than
   * `display:none;`.
   */
  position: absolute;
  top: 100%;
  left: -99999px; }

/**
 * Bring the flyouts into view when you hover their parents.
 * Two different types of flyout; ‘regular’ (`.flyout`) and ‘alternative’
 * (`.flyout--alt`).
 */
.flyout:hover,
.flyout--alt:hover {
  overflow: visible; }

/**
 * Regular flyouts sit all the way from the top, flush left.
 */
.flyout:hover > .flyout__content {
  left: 0; }

/**
 * Alternative flyouts sit all the way from the left, flush top.
 */
.flyout--alt:hover > .flyout__content {
  top: 0;
  left: 100%; }

/*------------------------------------*\
    $SPRITE
\*------------------------------------*/
/**
 * Giving an element a class of `.s` will throw it into ‘sprite’ mode and apply
 * a background image e.g.:
 * 
   <a class="s  s--question-mark">More info&hellip;</a>
 * 
 * or
 * 
   <a href=#><i class="s  s--question-mark"></i> Help and FAQ</a>
 * 
 * Giving an element a class of `.i` will throw it into ‘icon’ mode and will
 * not add a background, but should be used for icon fonts and is populated
 * through a `data-char` attribute and the `:after` pseudo-element, e.g.:
 * 
   <a href=# class=i data-char="C">Add to favorites</a>
 * 
 * or
 * 
   <a href=#><i class=i data-char="C"></i> View your favourites</a>
 * 
 * Where ‘C’ might map to a star in your particular font.
 * 
 * These all require extension in your theme stylesheet.
 * 
 * Demo: jsfiddle.net/inuitcss/6TKuS
 * 
 */
.s,
.i {
  display: inline-block;
  /**
   * The typical size of most icons. Override in your theme stylesheet.
   */
  width: 16px;
  height: 16px;
  position: relative;
  zoom: 1;
  /**
   * So using `.i` on `i` elements doesn’t make a visual difference.
   */
  font-style: normal;
  /**
   * So icons added using `.i` sit in the centre of the element.
   */
  text-align: center; }

.s {
  background-image: url(/path/to/your/sprite.png);
  vertical-align: middle;
  top: -1px;
  /*
   * H5BP method image replacement:
   * github.com/h5bp/html5-boilerplate/commit/adecc5da035d6d76b77e3fa95c6abde841073da2
   */
  overflow: hidden;
  *text-indent: -9999px; }
  .s:before {
    content: "";
    display: block;
    width: 0;
    height: 100%; }

.i {
  vertical-align: top; }
  .i:after {
    content: attr(data-char); }

/*------------------------------------*\
    $ICON-TEXT
\*------------------------------------*/
/**
 * For text-links etc that have an icon with them. Sometimes whitespace would
 * suffice in creating a gap between the icon and text, for example:
 * 
   <a href=#>
       <i class="s  s--help"></i> Help &amp; support
   </a>
 * 
 * However we will sometimes want a larger, explicity set gap:
   <a href=# class=icon-text>
       <i class="icon-text__icon  s  s--help"></i>Help &amp; support
   </a>
 * 
 * Demo: jsfiddle.net/inuitcss/Q6Lbf
 * 
 */
.icon-text > .icon-text__icon {
  margin-right: 8px; }

/**
 * We can also reverse the direction of the margin for icons that appear to the
 * right of the text content, thus:
 *
   <a href=# class=icon-text--rev>
       Help &amp; support<i class="icon-text__icon  s  s--help"></i>
   </a>
 *
 */
.icon-text--rev > .icon-text__icon {
  margin-left: 8px; }

/*------------------------------------*\
    $BUTTONS
\*------------------------------------*/
/**
 * Basic button structural styling. Extend in your theme stylesheet.
 * 
 * Demo: jsfiddle.net/inuitcss/RqHcp
 * 
 */
.btn {
  font: inherit;
  cursor: pointer;
  border: none;
  display: inline-block;
  margin: 0;
  line-height: 1;
  /**
   * Set padding in ems so we can change the size of a button by merely
   * altering its `font-size`.
   */
  padding: 0.5em; }

.btn,
.btn:hover {
  text-decoration: none; }

/**
 * Basic button modifiers
 */
.btn--sml {
  font-size: .75em; }

.btn--lrg {
  font-size: 1.50em; }

.btn--full {
  display: block;
  text-align: center;
  /**
   * The following is so that `.btn-full` works properly on `input`s as well
   * as `a`s.
   */
  padding-right: 0;
  padding-left: 0;
  width: 100%; }

/*------------------------------------*\
    $LOZENGES
\*------------------------------------*/
/**
 * Create pill- and lozenge-like runs of text, e.g.:
 * 
   <p>This <span class=pill>here</span> is a pill!</p>
 * 
   <p>This <span class=loz>here</span> is also a lozenge!</p>
 * 
 * Pills have fully rounded ends, lozenges have only their corners rounded.
 * 
 * Demo: jsfiddle.net/inuitcss/N3pGm
 * 
 */
.pill, .loz {
  display: inline-block;
  /**
   * These numbers set in ems mean that, at its narrowest, a lozenge will be
   * the same width as the `line-height` set on the `html` element.
   * This allows us to use the `.loz` in almost any `font-size` we wish.
   */
  min-width: 1.0em;
  padding-right: 0.25em;
  padding-left: 0.25em;
  /* =1.50em */
  text-align: center;
  background-color: #ccc;
  /* Override this color in your theme stylesheet */
  color: #fff;
  /* Override this color in your theme stylesheet */
  /**
   * Normally we’d use border-radius:100%; but instead here we just use an
   * overly large number; `border-radius:100%;` would create an oval on
   * non-square elements whereas we just want to round the ends of an element.
   */
  border-radius: 100px; }

.loz {
  border-radius: 4px; }

/*------------------------------------*\
    $RULES
\*------------------------------------*/
/**
 * Horizontal rules, extend `hr`.
 * 
 * Demo: jsfiddle.net/inuitcss/L6GuZ
 * 
 */
.rule {
  color: #ccc;
  /* Sets border color, extend in your theme stylesheet. */
  border: none;
  border-bottom-width: 1px;
  border-bottom-style: solid;
  margin-bottom: 23px;
  margin-bottom: 1.4375rem; }

/**
 * Dotted rules
 */
.rule--dotted {
  border-bottom-style: dotted; }

/**
 * Dashed rules
 */
.rule--dashed {
  border-bottom-style: dashed; }

/**
 * Ornamental rules. Places a § over the rule.
 */
.rule--ornament {
  position: relative;
  /**
  * Pass in an arbitrary ornament though a data attribute, e.g.:
  * 
    <hr class="rule  rule--ornament" data-ornament="!">
  * 
  */ }
  .rule--ornament:after {
    content: "§";
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    line-height: 0;
    text-align: center; }
  .rule--ornament[data-ornament]:after {
    content: attr(data-ornament); }

/*------------------------------------*\
    $STATS
\*------------------------------------*/
/**
 * Simple object to display key–value statistic-like information, e.g.: 
 *
   <div class=stat-group>
       <dl class=stat>
           <dt class=stat__title>Tweets</dt>
           <dd class=stat__value>27,740</dd>
       </dl>
       
       <dl class=stat>
           <dt class=stat__title>Following</dt>
           <dd class=stat__value>11,529</dd>
       </dl>
       
       <dl class=stat>
           <dt class=stat__title>Followers</dt>
           <dd class=stat__value>12,105</dd>
       </dl>
   </div>
 *
 * Demo: jsfiddle.net/inuitcss/Bpwu6
 *
 */
.stat-group {
  margin-left: -24px; }

.stat {
  float: left;
  margin-left: 24px;
  display: -webkit-box;
  display: -moz-box;
  display: box;
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  -ms-box-orient: vertical;
  -o-box-orient: vertical;
  box-orient: vertical; }

.stat__title {
  -webkit-box-ordinal-group: 2;
  -moz-box-ordinal-group: 2;
  -ms-box-ordinal-group: 2;
  -o-box-ordinal-group: 2;
  box-ordinal-group: 2; }

.stat__value {
  margin-left: 0;
  -webkit-box-ordinal-group: 1;
  -moz-box-ordinal-group: 1;
  -ms-box-ordinal-group: 1;
  -o-box-ordinal-group: 1;
  box-ordinal-group: 1; }

/*------------------------------------*\
    $GREYBOX
\*------------------------------------*/
/**
 * Quickly throw together greybox wireframes. Use in conjunction with other
 * inuit.css objects to create simple greybox prototypes, e.g.:
 * 
   <div class="island  greybox  greybox--medium">Header</div>
   
   <ul class="nav  nav--fit  nav--block  greybox">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 * 
 * The beauty of combining the greyboxing with inuit.css objects is that any
 * prototyping can quickly be converted into/used as production code.
 * 
 * For a more complete prototyping framework, consider Adam Whitcroft’s Proto:
 * adamwhitcroft.com/proto
 * 
 * Demo: jsfiddle.net/inuitcss/qCXfh/
 * 
 */
.greybox,
.graybox {
  font-size: 12px;
  font-size: 0.75rem;
  line-height: 2;
  font-family: sans-serif;
  text-align: center;
  background-color: rgba(0, 0, 0, 0.2);
  color: #fff; }

.greybox a,
.graybox a {
  color: #fff;
  text-decoration: underline; }

/**
 * All greyboxes will occupy 100% of their parent’s width, but to alter their
 * heights we apply incrementally larger line-heights:
 */
.greybox--small,
.graybox--small {
  line-height: 48px; }

.greybox--medium,
.graybox--medium {
  line-height: 96px; }

.greybox--large,
.graybox--large {
  line-height: 192px; }

.greybox--huge,
.graybox--huge {
  line-height: 384px; }

.greybox--gigantic,
.graybox--gigantic {
  line-height: 768px; }

/**
 * Style trumps; helper and brand classes
 */
/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * Sizes in human readable format. These are used in conjunction with other
 * objects and abstractions found in inuit.css, most commonly the grid system
 * and faux flexbox.
 */
/**
 * Whole
 */
.one-whole {
  width: 100%; }

/**
 * Halves
 */
.one-half, .two-quarters, .three-sixths, .four-eighths, .five-tenths, .six-twelfths {
  width: 50%; }

/**
 * Thirds
 */
.one-third, .two-sixths, .four-twelfths {
  width: 33.333%; }

.two-thirds, .four-sixths, .eight-twelfths {
  width: 66.666%; }

/**
 * Quarters
 */
.one-quarter, .two-eighths, .three-twelfths {
  width: 25%; }

.three-quarters, .six-eighths, .nine-twelfths {
  width: 75%; }

/**
 * Fifths
 */
.one-fifth, .two-tenths {
  width: 20%; }

.two-fifths, .four-tenths {
  width: 40%; }

.three-fifths, .six-tenths {
  width: 60%; }

.four-fifths, .eight-tenths {
  width: 80%; }

/**
 * Sixths
 */
.one-sixth, .two-twelfths {
  width: 16.666%; }

.five-sixths, .ten-twelfths {
  width: 83.333%; }

/**
 * Eighths
 */
.one-eighth {
  width: 12.5%; }

.three-eighths {
  width: 37.5%; }

.five-eighths {
  width: 62.5%; }

.seven-eighths {
  width: 87.5%; }

/**
 * Tenths
 */
.one-tenth {
  width: 10%; }

.three-tenths {
  width: 30%; }

.seven-tenths {
  width: 70%; }

.nine-tenths {
  width: 90%; }

/**
 * Twelfths
 */
.one-twelfth {
  width: 8.333%; }

.five-twelfths {
  width: 41.666%; }

.seven-twelfths {
  width: 58.333%; }

.eleven-twelfths {
  width: 91.666%; }

/*------------------------------------*\
    $PUSH
\*------------------------------------*/
/**
 * Push classes, to move grid items over to the right by certain amounts.
 */
.push, .push--one-half, .push--two-quarters, .push--three-sixths, .push--four-eighths, .push--six-twelfths, .push--one-third, .push--two-sixths, .push--four-twelfths, .push--two-thirds, .push--four-sixths, .push--eight-twelfths, .push--one-quarter, .push--two-eighths, .push--three-twelfths, .push--three-quarters, .push--six-eighths, .push--nine-twelfths, .push--one-fifth, .push--two-tenths, .push--two-fifths, .push--four-tenths, .push--three-fifths, .push--six-tenths, .push--four-fifths, .push--eight-tenths, .push--one-sixth, .push--two-twelfths, .push--five-sixths, .push--ten-twelfths, .push--one-eighth, .push--three-eighths, .push--five-eighths, .push--seven-eighths, .push--one-tenth, .push--three-tenths, .push--five-tenths, .push--seven-tenths, .push--nine-tenths, .push--one-twelfth, .push--five-twelfths, .push--seven-twelfths, .push--eleven-twelfths {
  position: relative; }

/**
 * Halves
 */
.push--one-half, .push--two-quarters, .push--three-sixths, .push--four-eighths, .push--six-twelfths {
  left: 50%; }

/**
 * Thirds
 */
.push--one-third, .push--two-sixths, .push--four-twelfths {
  left: 33.333%; }

.push--two-thirds, .push--four-sixths, .push--eight-twelfths {
  left: 66.666%; }

/**
 * Quarters
 */
.push--one-quarter, .push--two-eighths, .push--three-twelfths {
  left: 25%; }

.push--three-quarters, .push--six-eighths, .push--nine-twelfths {
  left: 75%; }

/**
 * Fifths
 */
.push--one-fifth, .push--two-tenths {
  left: 20%; }

.push--two-fifths, .push--four-tenths {
  left: 40%; }

.push--three-fifths, .push--six-tenths {
  left: 60%; }

.push--four-fifths, .push--eight-tenths {
  left: 80%; }

/**
 * Sixths
 */
.push--one-sixth, .push--two-twelfths {
  left: 16.666%; }

.push--five-sixths, .push--ten-twelfths {
  left: 83.333%; }

/**
 * Eighths
 */
.push--one-eighth {
  left: 12.5%; }

.push--three-eighths {
  left: 37.5%; }

.push--five-eighths {
  left: 62.5%; }

.push--seven-eighths {
  left: 87.5%; }

/**
 * Tenths
 */
.push--one-tenth {
  left: 10%; }

.push--three-tenths {
  left: 30%; }

.push--five-tenths {
  left: 50%; }

.push--seven-tenths {
  left: 70%; }

.push--nine-tenths {
  left: 90%; }

/**
 * Twelfths
 */
.push--one-twelfth {
  left: 8.333%; }

.push--five-twelfths {
  left: 41.666%; }

.push--seven-twelfths {
  left: 58.333%; }

.push--eleven-twelfths {
  left: 91.666%; }

/*------------------------------------*\
    $PULL
\*------------------------------------*/
/**
 * Pull classes, to move grid items over to the left by certain amounts.
 */
.pull, .pull--one-half, .pull--two-quarters, .pull--three-sixths, .pull--four-eighths, .pull--six-twelfths, .pull--one-third, .pull--two-sixths, .pull--four-twelfths, .pull--two-thirds, .pull--four-sixths, .pull--eight-twelfths, .pull--one-quarter, .pull--two-eighths, .pull--three-twelfths, .pull--three-quarters, .pull--six-eighths, .pull--nine-twelfths, .pull--one-fifth, .pull--two-tenths, .pull--two-fifths, .pull--four-tenths, .pull--three-fifths, .pull--six-tenths, .pull--four-fifths, .pull--eight-tenths, .pull--one-sixth, .pull--two-twelfths, .pull--five-sixths, .pull--ten-twelfths, .pull--one-eighth, .pull--three-eighths, .pull--five-eighths, .pull--seven-eighths, .pull--one-tenth, .pull--three-tenths, .pull--five-tenths, .pull--seven-tenths, .pull--nine-tenths, .pull--one-twelfth, .pull--five-twelfths, .pull--seven-twelfths, .pull--eleven-twelfths {
  position: relative; }

/**
 * Halves
 */
.pull--one-half, .pull--two-quarters, .pull--three-sixths, .pull--four-eighths, .pull--six-twelfths {
  right: 50%; }

/**
 * Thirds
 */
.pull--one-third, .pull--two-sixths, .pull--four-twelfths {
  right: 33.333%; }

.pull--two-thirds, .pull--four-sixths, .pull--eight-twelfths {
  right: 66.666%; }

/**
 * Quarters
 */
.pull--one-quarter, .pull--two-eighths, .pull--three-twelfths {
  right: 25%; }

.pull--three-quarters, .pull--six-eighths, .pull--nine-twelfths {
  right: 75%; }

/**
 * Fifths
 */
.pull--one-fifth, .pull--two-tenths {
  right: 20%; }

.pull--two-fifths, .pull--four-tenths {
  right: 40%; }

.pull--three-fifths, .pull--six-tenths {
  right: 60%; }

.pull--four-fifths, .pull--eight-tenths {
  right: 80%; }

/**
 * Sixths
 */
.pull--one-sixth, .pull--two-twelfths {
  right: 16.666%; }

.pull--five-sixths, .pull--ten-twelfths {
  right: 83.333%; }

/**
 * Eighths
 */
.pull--one-eighth {
  right: 12.5%; }

.pull--three-eighths {
  right: 37.5%; }

.pull--five-eighths {
  right: 62.5%; }

.pull--seven-eighths {
  right: 87.5%; }

/**
 * Tenths
 */
.pull--one-tenth {
  right: 10%; }

.pull--three-tenths {
  right: 30%; }

.pull--five-tenths {
  right: 50%; }

.pull--seven-tenths {
  right: 70%; }

.pull--nine-tenths {
  right: 90%; }

/**
 * Twelfths
 */
.pull--one-twelfth {
  right: 8.333%; }

.pull--five-twelfths {
  right: 41.666%; }

.pull--seven-twelfths {
  right: 58.333%; }

.pull--eleven-twelfths {
  right: 91.666%; }

/*------------------------------------*\
    $BRAND
\*------------------------------------*/
/**
 * `.brand` is a quick and simple way to apply your brand face and/or color to
 * any element using a handy helper class.
 */
.brand {
  font-family: "nimbus-sans", Segoe, "Segoe UI", Optima, Arial, sans-serif!important;
  color: #4d4d4d!important; }

.brand-face {
  font-family: "nimbus-sans", Segoe, "Segoe UI", Optima, Arial, sans-serif!important; }

.brand-color,
.brand-colour {
  color: #4d4d4d!important; }

/*------------------------------------*\
    $HELPER
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.fl` class to the markup.
 */
.fr {
  float: right; }

.fl {
  float: left; }

.text-center,
.text-centre {
  text-align: center; }

/**
 * Pull items full width of `.island` parents.
 */
.full-bleed {
  margin-right: -24px;
  margin-left: -24px; }
  .islet .full-bleed {
    margin-right: -12px;
    margin-left: -12px; }

/**
 * Add a help cursor to any element that gives the user extra information on
 * `:hover`.
 */
.informative {
  cursor: help; }

/**
 * Align items to the right where they imply progression/movement forward, e.g.:
 * 
   <p class=proceed><a href=#>Read more...</a></p>
 * 
 */
.proceed {
  text-align: right; }

/**
 * Add a right-angled quote to links that imply movement, e.g.:
 * 
   <a href=# class=go>Read more</a>
 * 
 */
.go:after {
  content: " »"; }

/**
 * Apply capital case to an element (usually a `strong`).
 */
.caps {
  text-transform: uppercase; }

/**
 * Hide content off-screen without resorting to `display:none;`
 */
.accessibility {
  position: absolute;
  left: -99999px; }

[dir=rtl] .accessibility {
  left: auto;
  right: -99999px; }

/* endif */
/**
 * She’s all yours, cap’n... Begin importing your stuff here.
 */
body {
  width: 960px;
  margin: 0 auto;
  background: #f6f6f6; }

footer {
  text-align: center; }
  footer a {
    color: #b72727; }
    footer a:hover {
      color: #8d1e1e; }

.header-container, .main-container {
  margin-bottom: 48px;
  margin-bottom: 3rem; }

/**
 * $TYPOGRAPHY
 */
body {
  font-family: "calluna", Palatino, "Palatino Linotype", Georgia, serif; }

h1, h2, h3, h4, h5, h6 {
  font-family: "nimbus-sans", Segoe, "Segoe UI", Optima, Arial, sans-serif;
  color: #3d3d3d; }

/**
 * $LINKS
 */
a {
  color: #005eab; }

a:hover {
  color: #004278; }

/**
 * $NAV
 */
.nav a {
  color: #b72727; }
  .nav a:hover {
    color: #8d1e1e; }

/**
 * $SECTIONS
 */
.post--header {
  margin-bottom: 1em; }

.poetry {
  font-style: italic; }

/**
 * $POST
 */
.post_title {
  color: #b72727; }

.meta .date, .meta .category {
  font-style: italic; }

/**
 * $MISC
 */
::selection, ::-moz-selection, ::-webkit-selection {
  color: #f3f3f3;
  background: #d53c3c; }
